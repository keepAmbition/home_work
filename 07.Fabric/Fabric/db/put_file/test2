import paramiko
import os
import sys
from stat import S_ISDIR
path = os.path.dirname(os.path.dirname(__file__))
sys.path.append(path)
# from conf.host_dict import HOST_MAP
# for host in HOST_MAP:
#     print(host)
#     print(HOST_MAP[host]["username"],HOST_MAP[host]["password"])


class Fabric(object):

    def __init__(self, host, username, password, port=22):
        self.host = host
        self.username = username
        self.password = password
        self.port = port
        self.now_path = ""


    def connect(self):
        """
        连接远程主机
        :return:FTP SSH 的实例
        """
        t_transport = paramiko.Transport(sock=(self.host, self.port))
        t_transport.connect(username=self.username, password=self.password)
        sftp = paramiko.SFTPClient.from_transport(t_transport)
        ssh = paramiko.SSHClient()
        ssh._transport = t_transport
        return sftp, ssh

    def exec_cmd(self):
        print("主机%s已激活" % self.host)
        self.show_remote_files()
        text = """\n当前路径下目录和文件如上所示，其中目录不可执行get or put命令，请输入命令：
    1、put 文件名
    2、get 文件名
    3、cd  路径
    4、ls
        """
        print(text)
        while True:
            print("cmd", self.now_path)
            cmd = input("cmd>>>").strip()
            if cmd.startswith("put"):
                file_name = cmd.split()[1].strip()
                self.put_file(file_name)
            elif cmd.startswith("get"):
                file_name = cmd.split()[1]
                save_file_path = os.path.join(os.path.join(os.path.join(path, "db"), "get_save_file"), file_name)
                self.get_file(file_name, save_file_path)
            elif cmd.startswith("cd"):
                self.cd_path(cmd)
            else:
                self.ls_file()

    def show_remote_file_list(self, first_cmd):
        """
        j将远程主机路径下的的所有文件加入列表待用
        :param first_cmd: 命令
        :return:该路径下所有文件
        """
        sftp, ssh = self.connect()
        cmd = first_cmd + ";pwd"
        std_in, std_out, std_err = ssh.exec_command(cmd)
        dir_files_path = std_out.read().decode().strip()
        print(dir_files_path)
        files = list()
        dir_files = sftp.listdir_attr(dir_files_path)
        print(dir_files)
        for i in dir_files:
            if S_ISDIR(i.st_mode):
                print(i.filename + "（目录）")
            else:
                files.append(i.filename)
                print(i.filename + "（文件）")
        return dir_files_path, files

    def show_remote_files(self):
        """
        判断远程主机路径下的是目录还是文件
        """
        sftp, ssh = self.connect()
        std_in, std_out, std_err = ssh.exec_command("pwd")
        # 获取当前目录路径
        dir_files_path = std_out.read().decode().strip()
        print("当前路径%s下的目录和文件:\n" % dir_files_path)
        dir_files = sftp.listdir_attr(dir_files_path)
        for i in dir_files:
            if S_ISDIR(i.st_mode):
                print(i.filename + "（目录）")
            else:
                print(i.filename + "（文件）")

    def put_file(self, file_name):
        """
        推送文件至远程主机
        :param:file_name 本地文件名称
        :return:
        """
        sftp, ssh = self.connect()
        if self.now_path == "":
            std_in, std_out, std_err = ssh.exec_command("pwd")
            now_path = std_out.read().decode().strip() + "/" + file_name

        else:
            now_path = self.now_path + "/" + file_name
        file_path = path + "/foo" + "/" + file_name
        print(file_path)

        sftp.put(file_path, now_path)
        sftp.close()

    def get_file(self, file_name, local_file):
        """
        从远程主机下载文件
        :param file_name:
        :param local_file:
        :return:
        """
        sftp, ssh = self.connect()
        print("get", self.now_path)
        if self.now_path == "":
            std_in, std_out, std_err = ssh.exec_command("pwd")
            now_path = std_out.read().decode().strip()
            '''注释的这行代码也可以用，不过通过os.path.join()组合成的路径，因为Linux系统跟win系统的路径差异,
            下面代码组成的路径就会是这样的: /root\\healthCheck.html,所以想使用下面代码，必须先print(std_out.read().decode().strip())一下
            不然就会找不到文件路径报错'''
            # remote_path = os.path.join(std_out.read().decode().strip(), file_name)
            remote_path = now_path + "/" + file_name
        else:
            remote_path = self.now_path + "/" + file_name
        sftp.get(remote_path, local_file)
        sftp.close()

    def cd_path(self, cmd):
        """
        根据cd命令切换目录
        :param cmd:命令
        :return:
        """
        ftp, ssh = self.connect()
        # a = cmd + ";pwd;ls"
        # print(a)
        std_in, std_out, std_err = ssh.exec_command(cmd + ";pwd;ls")
        print("目录已切换至:%s" % std_out.read().decode())
        self.now_path = cmd.split()[1].strip()
        print("cd", self.now_path)

    def ls_file(self):
        """
        展示当前路径下目录和文件
        :return:null
        """
        print("ls", self.now_path)
        ftp, ssh = self.connect()
        if self.now_path == "":
            std_in, std_out, std_err = ssh.exec_command("ls")
            print(std_out.read().decode())
        else:
            std_in_one, std_out_one, std_err_one = ssh.exec_command("cd " + self.now_path + ";ls")
            print(std_out_one.read().decode())


if __name__ == "__main__":
    #start = Fabric("101.236.23.237", "root", "8Jy9ZAb3sDsU")
    start = Fabric("192.168.1.249", "keepambition", "123456")
    #start.get_file('/root/css/flightFooter.css', 'file')
    # start.show_remote_files("cd /home/fr/webServer")
    start.exec_cmd()